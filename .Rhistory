0.50234599,
0.83462092,
0.95681938,
0.92906875,
0.94245437,
0.01209518
)
new_x <- data.frame(x = new_diameters)
new_height <- predict(model, new_x)
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height', col = 'grey', xlim = c(0,1))
lines(x, fitted(lm(y~x)), color = 'red')
points(new_diameters %>% unlist(), new_height, col = 'violet', pch = 19)
new_diameters <- c(
0.15218946,
0.48361548,
0.58095513,
0.07603687,
0.50234599,
0.83462092,
0.95681938,
0.92906875,
0.94245437,
0.01209518
)
new_x <- data.frame(x = new_diameters)
new_height <- predict(model, new_x)
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height', col = 'grey', xlim = c(0,1))
lines(x, fitted(lm(y~x)), col = 'red')
points(new_diameters %>% unlist(), new_height, col = 'violet', pch = 19)
x <- df$diameter
y <- df$height
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height', col = 'grey')
lines(x, fitted(lm(y ~x)), col = 'red')
x <- df$diameter
y <- df$height
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height')
lines(x, fitted(lm(y ~x)), col = 'red')
new_diameters <- c(
0.15218946,
0.48361548,
0.58095513,
0.07603687,
0.50234599,
0.83462092,
0.95681938,
0.92906875,
0.94245437,
0.01209518
)
new_x <- data.frame(x = new_diameters)
new_height <- predict(model, new_x)
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height', xlim = c(0,1))
lines(x, fitted(lm(y~x)), col = 'red')
points(new_diameters %>% unlist(), new_height, col = 'violet', pch = 19)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' ') + vjust = 1)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' ') + theme(plot.title = element_text(hjust = 0.5))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' ') + theme(plot.title = element_text(hjust = 0.5)))
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' ') + theme(plot.title = element_text(hjust = 0.5)))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' ') + theme(plot.title = element_text(color = 'red', size = 8)))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, label_size = 9)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, label_size = 9)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, hjust = 0.5 label_size = 9)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, hjust = 0.5, label_size = 9)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1.5, hjust = 1, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.75, hjust = 1, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.75, hjust = 0, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, hjust = 0.5, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, hjust = -0.5, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, hjust = -1, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, hjust = -1, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 2, hjust = -1, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0, hjust = -1, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.25, hjust = -1, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.5, hjust = -1, label_size = 9)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, hjust = -1, label_size = 9)
?cor()
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, hjust = 0, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, hjust = -0.25, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, hjust = 0, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.9, hjust = 0, label_size = 9)
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' ') + theme(plot.title = element_text(hjust = 0.5)))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.9, label_size = 9)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.9, label_size = 5)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.9, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1.5, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1.5, hjust = -0.25, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.5, hjust = 0.5, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.5, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, hjust = 0, label_size = 8)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, hjust = 0.5, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, hjust = 2, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 1, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.8, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.9, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, hjust = 0, label_size = 8)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' ') + vjust = 0.9)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' ') + theme(vjust = 0.9))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, hjust = 0, label_size = 8)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.25, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.85, hjust = 0, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.85, hjust = 0.1, label_size = 8)
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.85, hjust = 0, label_size = 8)
library(readr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(purrr)
library(cowplot)
library(readr)
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone_col_names <- c(
"sex",
"length",
"diameter",
"height",
"whole_weight",
"shucked_weight",
"viscera_weight",
"shell_weight",
"rings"
)
# reading in the url to create 'abalone' tibble
abalone <- read.csv(url)
# renaming columns in 'abalone' to col names provided
colnames(abalone) = abalone_col_names
df <- abalone %>%
na.omit()
# selecting all but sex, putting the variables into a column and the values into a column and then plotting
df %>%
select(!sex) %>%
gather(cols, value) %>%
ggplot() +
geom_histogram(aes(value)) +
facet_wrap(~ cols, scales = 'free')
df %>%
ggplot() +
geom_boxplot(aes(x = length, y = sex))
df %>%
ggplot() +
geom_violin(aes(x = diameter, y = sex))
df %>%
ggplot() +
geom_point(aes(x = length, y = diameter, shape = sex, color = sex, size = shell_weight)) +
labs(size = "shell weight")
df %>%
ggplot() +
geom_point(aes(x = length, y = diameter, color = sex)) +
geom_smooth(aes(x = length, y = diameter), method = lm, color = 'black') +
facet_wrap(~sex, nrow = 3)
# creating dataset that contains all the mean values each variable
# using pivot_longer to put the column names into one column and all the means into another
df2 <- df %>%
filter(length >= 0.5) %>%
group_by(sex) %>%
summarise(mean_length = mean(length),
mean_diameter = mean(diameter),
mean_height = mean(height),
mean_whole_weight = mean(whole_weight),
mean_shucked_weight = mean(shucked_weight),
mean_viscera_weight = mean(viscera_weight),
mean_shell_weight = mean(shell_weight),
mean_rings = mean(rings)) %>%
pivot_longer(!sex,
names_to = 'Vars',
values_to = 'Means')
# plot the new dataset, facet wrapping by sex and stacking the bar charts vertically
df2 %>%
ggplot() +
geom_bar(aes(x = Means, y = Vars, fill = sex), stat = 'identity') +
facet_wrap(vars(sex), dir = 'v') +
ylab("Variables")
# adding new temp variable that uses if statements to assign new value based on current column
# summarize the total weight of each abalone
df %>%
mutate(num_rings = ifelse(rings>20, 'high', ifelse(rings<10, 'low', 'med'))) %>%
group_by(num_rings, sex) %>%
summarise(avg_weight = mean(whole_weight + shucked_weight + viscera_weight + shell_weight)) %>%
ggplot() +
geom_tile(aes(x = num_rings, y = sex, fill = avg_weight)) +
xlab("Number of rings") +
labs(fill = 'Average Weight') +
ggtitle('Number of Rings vs Sex')
# selecting all columns in table except for the sex column
df2 <- df %>%
select(length, diameter, height, whole_weight, shucked_weight, viscera_weight, shell_weight, rings)
# getting all the correlation values for each pair of quantitative variables & displaying that table
data.cor <- round(cor(df2),2)
data.cor
?cor()
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.85, hjust = 0, label_size = 8)
x <- df$diameter
y <- df$height
model <- lm(y ~ x, df)
summary(model)
x <- df$diameter
y <- df$height
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height')
lines(x, fitted(lm(y ~x)), col = 'red')
new_diameters <- c(
0.15218946,
0.48361548,
0.58095513,
0.07603687,
0.50234599,
0.83462092,
0.95681938,
0.92906875,
0.94245437,
0.01209518
)
new_x <- data.frame(x = new_diameters)
new_height <- predict(model, new_x)
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height', xlim = c(0,1))
lines(x, fitted(lm(y~x)), col = 'red')
points(new_diameters %>% unlist(), new_height, col = 'violet', pch = 19)
sessionInfo()
library(readr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(purrr)
library(cowplot)
library(readr)
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone_col_names <- c(
"sex",
"length",
"diameter",
"height",
"whole_weight",
"shucked_weight",
"viscera_weight",
"shell_weight",
"rings"
)
# reading in the url to create 'abalone' tibble
abalone <- read.csv(url)
# renaming columns in 'abalone' to col names provided
colnames(abalone) = abalone_col_names
df <- abalone %>%
na.omit()
# selecting all but sex, putting the variables into a column and the values into a column and then plotting
df %>%
select(!sex) %>%
gather(cols, value) %>%
ggplot() +
geom_histogram(aes(value)) +
facet_wrap(~ cols, scales = 'free')
df %>%
ggplot() +
geom_boxplot(aes(x = length, y = sex))
df %>%
ggplot() +
geom_violin(aes(x = diameter, y = sex))
df %>%
ggplot() +
geom_point(aes(x = length, y = diameter, shape = sex, color = sex, size = shell_weight)) +
labs(size = "shell weight")
df %>%
ggplot() +
geom_point(aes(x = length, y = diameter, color = sex)) +
geom_smooth(aes(x = length, y = diameter), method = lm, color = 'black') +
facet_wrap(~sex, nrow = 3)
# creating dataset that contains all the mean values each variable
# using pivot_longer to put the column names into one column and all the means into another
df2 <- df %>%
filter(length >= 0.5) %>%
group_by(sex) %>%
summarise(mean_length = mean(length),
mean_diameter = mean(diameter),
mean_height = mean(height),
mean_whole_weight = mean(whole_weight),
mean_shucked_weight = mean(shucked_weight),
mean_viscera_weight = mean(viscera_weight),
mean_shell_weight = mean(shell_weight),
mean_rings = mean(rings)) %>%
pivot_longer(!sex,
names_to = 'Vars',
values_to = 'Means')
# plot the new dataset, facet wrapping by sex and stacking the bar charts vertically
df2 %>%
ggplot() +
geom_bar(aes(x = Means, y = Vars, fill = sex), stat = 'identity') +
facet_wrap(vars(sex), dir = 'v') +
ylab("Variables")
# adding new temp variable that uses if statements to assign new value based on current column
# summarize the total weight of each abalone
df %>%
mutate(num_rings = ifelse(rings>20, 'high', ifelse(rings<10, 'low', 'med'))) %>%
group_by(num_rings, sex) %>%
summarise(avg_weight = mean(whole_weight + shucked_weight + viscera_weight + shell_weight)) %>%
ggplot() +
geom_tile(aes(x = num_rings, y = sex, fill = avg_weight)) +
xlab("Number of rings") +
labs(fill = 'Average Weight') +
ggtitle('Number of Rings vs Sex')
# selecting all columns in table except for the sex column
df2 <- df %>%
select(length, diameter, height, whole_weight, shucked_weight, viscera_weight, shell_weight, rings)
# getting all the correlation values for each pair of quantitative variables & displaying that table
data.cor <- round(cor(df2),2)
data.cor
# creating 2 new datasets that will be used for the map2() function
dfrings <- df %>%
select(rings)
dfquant <- df %>%
select(!sex)
# specifying the 2 datasets that are to be plotted against each other
# giving the ggplot/geom_point to indicate that we want rings to be plotted agaisnt all the variable in the other dataset
plot <- map2(dfquant, dfrings, ~ ggplot(df) + geom_point(aes(x = rings, y=.x, color=sex)) + ylab(' '))
# using cowplot::plot_grid() to make the grid of plots
cowplot::plot_grid(plotlist = plot, labels = colnames(dfquant), ncol = 3, vjust = 0.85, hjust = 0, label_size = 8)
x <- df$diameter
y <- df$height
model <- lm(y ~ x, df)
summary(model)
x <- df$diameter
y <- df$height
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height')
lines(x, fitted(lm(y ~x)), col = 'red')
new_diameters <- c(
0.15218946,
0.48361548,
0.58095513,
0.07603687,
0.50234599,
0.83462092,
0.95681938,
0.92906875,
0.94245437,
0.01209518
)
new_x <- data.frame(x = new_diameters)
new_height <- predict(model, new_x)
plot(x, y, xlab = 'diameter', ylab = 'height', pch=20, main = 'Abalone ring diameter vs height', xlim = c(0,1))
lines(x, fitted(lm(y~x)), col = 'red')
points(new_diameters %>% unlist(), new_height, col = 'violet', pch = 19)
sessionInfo()
