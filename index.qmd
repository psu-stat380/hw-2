---
title: "Homework 2"
author: "[Danny Dawson]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
#format: html
format: pdf
---

[Link to the Github repository](https://github.com/psu-stat380/hw-2)

---

::: {.callout-important style="font-size: 0.8em;"}
## Due: Tue, Feb 14, 2023 @ 11:59pm

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Abalone dataset](http://archive.ics.uci.edu/ml/datasets/Abalone) from the UCI Machine Learning Repository. The dataset consists of physical measurements of abalone (a type of marine snail) and includes information on the age, sex, and size of the abalone.

We will be using the following libraries:

```{r}
library(readr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(purrr)
library(cowplot)
```


<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 30 points
EDA using `readr`, `tidyr` and `ggplot2`
:::

###### 1.1 (5 points)

Load the "Abalone" dataset as a tibble called `abalone` using the URL provided below. The `abalone_col_names` variable contains a vector of the column names for this dataset (to be consistent with the R naming pattern). Make sure you read the dataset with the provided column names. 

```{r}
library(readr)
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"

abalone_col_names <- c(
  "sex", 
  "length", 
  "diameter", 
  "height", 
  "whole_weight", 
  "shucked_weight", 
  "viscera_weight", 
  "shell_weight", 
  "rings"
)

abalone <- read_csv(url, col_names = abalone_col_names)
```

---

###### 1.2 (5 points)

Remove missing values and `NA`s from the dataset and store the cleaned data in a tibble called `df`. How many rows were dropped?

```{r}
df <- abalone %>% na.omit()
```

No rows were dropped


---

##### 1.3 (5 points)

Plot histograms of all the quantitative variables in a **single plot** [^footnote_facet_wrap]

```{r}
df %>%
  keep(is.numeric) %>%
  gather() %>%
  ggplot(aes(value)) +
  facet_wrap(~ key, scales = "free") +
  geom_histogram()

#need to use pivot_longer or gather
```


---

##### 1.4 (5 points)

Create a boxplot of `length` for each `sex` and create a violin-plot of of `diameter` for each `sex`. Are there any notable differences in the physical appearances of abalones based on your analysis here?

```{r}
abalone_boxplot <- 
  df %>%
  ggplot(aes(length)) +
  geom_boxplot() +
  facet_wrap(~ sex)

abalone_boxplot
```

```{R}
abalone_violinplot <- 
  df %>%
  ggplot(aes(sex, diameter)) +
  geom_violin() +
  ggtitle("Violinplot of Sex vs Diameter")

abalone_violinplot
```


Female and Male abalones have about the same amount of variation in size. The intersex abalones have a little bit less variation, and are smaller than both the male and female abalones on average. 

---

###### 1.5  (5 points)

Create a scatter plot of `length` and `diameter`, and modify the shape and color of the points based on the `sex` variable. Change the size of each point based on the `shell_wight` value for each observation. Are there any notable anomalies in the dataset?



```{R}
abalone_scatterplot <-
  df %>%
  ggplot(aes(length, diameter, color = sex, shape = sex, size = shell_weight)) +
  geom_point()

abalone_scatterplot
```

There is a intersex anomaly in the scatterplot, with a green triangle completely displaced from the rest of the abalones. There is a male abalone that is somewhat an anomaly, but it is still pretty close to the trendline of sizes. 

---

###### 1.6 (5 points)

For each `sex`, create separate scatter plots of `length` and `diameter`. For each plot, also add a **linear** trendline to illustrate the relationship between the variables. Use the `facet_wrap()` function in R for this, and ensure that the plots are vertically stacked **not** horizontally. You should end up with a plot that looks like this: [^footnote_plot_facet]


```{R}
abalone_scatterplot2 <-
  df %>%
  ggplot(aes(length, diameter)) +
  geom_point(aes(color = sex)) +
  geom_smooth() +
  facet_wrap(~ sex, ncol = 1) #ncol = 1 stacks the plots vertically 

abalone_scatterplot2 
```



<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 40 points
More advanced analyses using `dplyr`, `purrrr` and `ggplot2`
:::


---

###### 2.1 (10 points)

Filter the data to only include abalone with a length of at least $0.5$ meters. Group the data by `sex` and calculate the mean of each variable for each group. Create a bar plot to visualize the mean values for each variable by `sex`.


```{R}
df %>% 
  filter(length >= 0.5) %>%
  group_by(sex) %>%
  summarise(avg = mean(length)) %>%
  ggplot() +
  geom_col(aes(sex, avg, width = 0.5, fill = sex))
```


---

###### 2.2 (15 points)

Implement the following in a **single command**:

1. Temporarily create a new variable called `num_rings` which takes a value of:

  * `"low"` if `rings < 10`
  * `"high"` if `rings > 20`, and
  * `"med"` otherwise

2. Group `df` by this new variable and `sex` and compute `avg_weight` as the average of the `whole_weight + shucked_weight + viscera_weight + shell_weight` for each combination of `num_rings` and `sex`. 

3. Use the `geom_tile()` function to create a tile plot of `num_rings` vs `sex` with the color indicating of each tile indicating the `avg_weight` value. 


```{R}
df %>%
  mutate(num_rings = case_when(rings < 10 ~ 'low',
                               rings > 20 ~ 'high',
                               rings > 10 | rings < 20 ~ 'med')) %>%
  group_by(sex, num_rings) %>%
  summarise(avg_weight = mean(whole_weight + shucked_weight + viscera_weight + shell_weight))%>%
  ggplot(aes(num_rings, sex)) +
  geom_tile(aes(fill = avg_weight)) + 
  ggtitle("Tile Plot of Number of Rings and Sex") +
  xlab("Number of Rings") +
  ylab("Sex")
  
```



---

###### 2.3 (5 points)

Make a table of the pairwise correlations between all the numeric variables rounded to 2 decimal points. Your final answer should look like this [^footnote_table]


```{r}
df2 <- df %>% select(-sex) 
res <- cor(df2)
res <- round(res, 2)
res
```



---

###### 2.4 (10 points)

Use the `map2()` function from the `purrr` package to create a scatter plot for each _quantitative_ variable against the number of `rings` variable. Color the points based on the `sex` of each abalone. You can use the `cowplot::plot_grid()` function to finally make the following grid of plots.

:::{.content-visible when-format="html"}
![](images/plot_grid.png)
:::


```{R}
#not sure how to use map2() to answer this question, below was my thought process. 


#map2 needs to connect the quantitative column and rings
#df['i'] can give back all of the values of a column I need
#need to loop through all of the columns in my map2 function 
#and map it to rings each time. 
#df['sex']
#df_numeric <- df %>% select(-sex)
#df_numeric
#cols <- c(colnames(df_numeric))
#cols
#now have all of the column names
#can loop through each column in mapping statement
#map2(
  
 # df$rings, 
  #plot(df$i,y)
#)

```



<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 30 points

Linear regression using `lm`
:::

---

###### 3.1 (10 points)

Perform a simple linear regression with `diameter` as the covariate and `height` as the response. Interpret the model coefficients and their significance values. 


```{R}
x <- df$diameter
y <- df$height
model <- lm(y ~ x)
summary(model)
```

The regression coefficients are as follows. 

b0 = -0.003803
b1 = 0.351376

The x-value (diameter) has a p-value of 2e-16. At basically any significance level, this will prove to be a statistically significant statistic. Thus, abalone diameter is a statistically significant predictor of abalone height. 


---

###### 3.2 (10 points)

Make a scatterplot of `height` vs `diameter` and plot the regression line in `color="red"`. You can use the base `plot()` function in R for this. Is the linear model an appropriate fit for this relationship? Explain. 


```{R}
x <- df$diameter
y <- df$height
plot(x, y, main = 'Height vs Diameter', xlab = 'diameter', ylab = 'height')
abline(lm(y ~ x), col = "red")
```

The linear model is an appropriate model for this data. Most of the data points lie near the line of best fit, and there are really only two outliers in the scatterplot. 

---

###### 3.3  (10 points)

Suppose we have collected observations for "new" abalones with `new_diameter` values given below. What is the expected value of their `height` based on your model above? Plot these new observations along with your predictions in your plot from earlier using `color="violet"`

```{R}

new_diameters <- c(
  0.15218946,
  0.48361548,
  0.58095513,
  0.07603687,
  0.50234599,
  0.83462092,
  0.95681938,
  0.92906875,
  0.94245437,
  0.01209518
)

x <- df$diameter
y <- df$height
z <- new_diameters

#need to use the regression coefficients to make an equation to calculate a new height,
#for the new diameters, then plot those new points on the original graph

#x coefficient = 0.351376 b1
#intercept = -0.003803 b0 

height_equation = function(x){
  height <- (-0.003803) + (0.351376 * x)
  return(round(height, 3))
}

new_heights <- c()

for(i in new_diameters){
  new_heights <- append(new_heights, height_equation(i))
}
a <- new_heights
a

#can plot these new points by using points(z, a, col = 'violet')

plot(x, y, main = 'Height vs Diameter', xlab = 'diameter', ylab = 'height')
abline(lm(y ~ x), col = "red")
points(z, a, col = 'violet')
```


:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---


# Appendix

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::

[^footnote_facet_wrap]:
  You can use the `facet_wrap()` function for this. Have a look at its documentation using the help console in R

[^footnote_plot_facet]:
  Plot example for 1.6<br>
  [![](images/lines.png){style="height: 5em;"}]{.content-visible when-format="html"}

[^footnote_table]:
  Table for 2.3<br>

:::{.content-visible when-format="html"}

| length| diameter| height| whole_weight| shucked_weight| viscera_weight| shell_weight| rings|
|:--------------|------:|--------:|------:|------------:|--------------:|--------------:|------------:|-----:|
|length         |   1.00|     0.99|   0.83|         0.93|           0.90|           0.90|         0.90|  0.56|
|diameter       |   0.99|     1.00|   0.83|         0.93|           0.89|           0.90|         0.91|  0.57|
|height         |   0.83|     0.83|   1.00|         0.82|           0.77|           0.80|         0.82|  0.56|
|whole_weight   |   0.93|     0.93|   0.82|         1.00|           0.97|           0.97|         0.96|  0.54|
|shucked_weight |   0.90|     0.89|   0.77|         0.97|           1.00|           0.93|         0.88|  0.42|
|viscera_weight |   0.90|     0.90|   0.80|         0.97|           0.93|           1.00|         0.91|  0.50|
|shell_weight   |   0.90|     0.91|   0.82|         0.96|           0.88|           0.91|         1.00|  0.63|
|rings          |   0.56|     0.57|   0.56|         0.54|           0.42|           0.50|         0.63|  1.00|

:::